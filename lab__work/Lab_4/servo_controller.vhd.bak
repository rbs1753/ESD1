-------------------------------------------------------------------------
-- Ryan Salmon
-- 02/19/2025
-- Lab 4 pre-Lab
-- Top level file containing the FSM, Register Logic

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

Entity top(
	Port(CLOCK_50  : in std_logic;
	     reset_n   : in std_logic
		 );
End Entity top;
 

Architecture model of Lab4 is

signal we         : std_logic;
signal addr       : std_logic;
signal w_data     : std_logic_vector(31 downto 0);
signal min_angle  : std_logic_vector(31 downto 0);
signal max_angle  : std_logic_vector(31 downto 0);
signal angle_cnt  : std_logic_vector(19 downto 0);
signal period_cnt : std_logic_vector(19 downto 0);
signal reset_sync : std_logic;

constant period : std_logic_vector(19 downto 0) := x"F4240";

Type state_type is (sweep_R, int_R, sweep_L, int_L);
signal current_state, next_state : state_type;

begin

 sync : process(clk, reset_sync) --State transition to clock logic 
      begin
        if(reset_sync = '1') then -- Active low button
          current_state <= sweep_R;
        elsif (rising_edge(clk)) then
          current_state <= next_state;
        end if;
      end process;

  
  comb: process(current_state, we, min_angle, max_angle)
      begin
	    case(current_state) is
		  when sweep_R =>
		    if (angle_cnt >= max_angle) then
			  next_state <= int_R;
			else next_state <= sweep_R;
			
		  when int_R =>
		    if(we = '1') then 
			  next_state <= sweep_L;
		  
		  when sweep_L =>
		    if(angle_cnt <= min_angle) then
			  next_state <= int_L;
			else next_state <=
			
		  when int_L =>
		   if(we = '1') then 
		     next_state <= sweep_R;
		    
			default: next_state <= sweep_R;
  
  RES_reset : rising_edge_synchronizer port map(
      input => reset,
      clk   => clk,
      reset => '1',
      edge  => reset_sync
        );